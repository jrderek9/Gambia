{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.0", "generated_at": "2025-07-06T10:22:41.020809Z", "invocation_id": "7bf674be-fec5-42e6-989a-25d2f9de13e8", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-07-06T10:22:40.643371Z", "completed_at": "2025-07-06T10:22:40.667878Z"}, {"name": "execute", "started_at": "2025-07-06T10:22:40.710394Z", "completed_at": "2025-07-06T10:22:40.758550Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.153334379196167, "adapter_response": {}, "message": "Database Error in model stg_paye_returns (models/staging/stg_paye_returns.sql)\n  function pg_catalog.extract(unknown, integer) does not exist\n  LINE 36:     EXTRACT(DAY FROM filing_date - due_date) AS days_late\n               ^\n  HINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n  compiled Code at target/run/gta_demo/models/staging/stg_paye_returns.sql", "failures": null, "unique_id": "model.gta_demo.stg_paye_returns", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT * FROM \"gta_warehouse\".\"raw\".\"paye_returns\"\n)\n\nSELECT\n    return_id,\n    taxpayer_id,\n    period_year,\n    period_month,\n    filing_date,\n    due_date,\n    employee_count,\n    gross_salaries,\n    paye_tax,\n    social_security,\n    total_deductions,\n    net_payment,\n    status,\n    created_at,\n    \n    -- Calculated fields\n    CASE \n        WHEN filing_date IS NULL THEN 'Not Filed'\n        WHEN filing_date > due_date THEN 'Late'\n        ELSE 'On Time'\n    END AS filing_status,\n    \n    EXTRACT(DAY FROM filing_date - due_date) AS days_late\n    \nFROM source", "relation_name": "\"gta_warehouse\".\"analytics_staging\".\"stg_paye_returns\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-07-06T10:22:40.660021Z", "completed_at": "2025-07-06T10:22:40.670520Z"}, {"name": "execute", "started_at": "2025-07-06T10:22:40.716946Z", "completed_at": "2025-07-06T10:22:40.764794Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14954018592834473, "adapter_response": {}, "message": "Database Error in model stg_vat_returns (models/staging/stg_vat_returns.sql)\n  function pg_catalog.extract(unknown, integer) does not exist\n  LINE 38:     EXTRACT(DAY FROM filing_date - due_date) AS days_late,\n               ^\n  HINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n  compiled Code at target/run/gta_demo/models/staging/stg_vat_returns.sql", "failures": null, "unique_id": "model.gta_demo.stg_vat_returns", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT * FROM \"gta_warehouse\".\"raw\".\"vat_returns\"\n)\n\nSELECT\n    return_id,\n    taxpayer_id,\n    period_year,\n    period_quarter,\n    filing_date,\n    due_date,\n    total_sales,\n    taxable_sales,\n    exempt_sales,\n    export_sales,\n    output_vat,\n    total_purchases,\n    input_vat,\n    net_vat_payable,\n    status,\n    created_at,\n    \n    -- Calculated fields\n    CASE \n        WHEN filing_date IS NULL THEN 'Not Filed'\n        WHEN filing_date > due_date THEN 'Late'\n        ELSE 'On Time'\n    END AS filing_status,\n    \n    EXTRACT(DAY FROM filing_date - due_date) AS days_late,\n    \n    -- VAT efficiency ratio\n    CASE \n        WHEN total_sales > 0 THEN output_vat / total_sales\n        ELSE 0\n    END AS vat_rate_effective\n    \nFROM source", "relation_name": "\"gta_warehouse\".\"analytics_staging\".\"stg_vat_returns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-06T10:22:40.656647Z", "completed_at": "2025-07-06T10:22:40.670027Z"}, {"name": "execute", "started_at": "2025-07-06T10:22:40.723643Z", "completed_at": "2025-07-06T10:22:40.869605Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.23653125762939453, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.gta_demo.stg_taxpayers", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT * FROM \"gta_warehouse\".\"raw\".\"taxpayers\"\n)\n\nSELECT\n    taxpayer_id,\n    tin,\n    name,\n    taxpayer_type,\n    registration_date,\n    email,\n    phone,\n    address_line1,\n    address_line2,\n    district,\n    region,\n    business_sector,\n    business_subsector,\n    employee_count,\n    annual_turnover,\n    risk_category,\n    compliance_score,\n    created_at,\n    updated_at\nFROM source", "relation_name": "\"gta_warehouse\".\"analytics_staging\".\"stg_taxpayers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-06T10:22:40.652600Z", "completed_at": "2025-07-06T10:22:40.669005Z"}, {"name": "execute", "started_at": "2025-07-06T10:22:40.672470Z", "completed_at": "2025-07-06T10:22:40.871399Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.23938989639282227, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.gta_demo.stg_payments", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT * FROM \"gta_warehouse\".\"raw\".\"payments\"\n)\n\nSELECT\n    payment_id,\n    taxpayer_id,\n    payment_date,\n    payment_channel,\n    payment_provider,\n    tax_type,\n    period_year,\n    period_month,\n    amount,\n    reference_number,\n    status,\n    created_at,\n    \n    -- Extract payment delay information\n    EXTRACT(YEAR FROM payment_date) AS payment_year,\n    EXTRACT(MONTH FROM payment_date) AS payment_month,\n    EXTRACT(QUARTER FROM payment_date) AS payment_quarter\n    \nFROM source\nWHERE status = 'Completed'", "relation_name": "\"gta_warehouse\".\"analytics_staging\".\"stg_payments\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gta_demo.int_taxpayer_compliance", "compiled": false, "compiled_code": null, "relation_name": "\"gta_warehouse\".\"analytics_intermediate\".\"int_taxpayer_compliance\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gta_demo.taxpayer_360_view", "compiled": false, "compiled_code": null, "relation_name": "\"gta_warehouse\".\"analytics_analytics\".\"taxpayer_360_view\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gta_demo.fraud_detection_alerts", "compiled": false, "compiled_code": null, "relation_name": "\"gta_warehouse\".\"analytics_analytics\".\"fraud_detection_alerts\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-07-06T10:22:40.896992Z", "completed_at": "2025-07-06T10:22:40.913931Z"}, {"name": "execute", "started_at": "2025-07-06T10:22:40.920543Z", "completed_at": "2025-07-06T10:22:40.982367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09972047805786133, "adapter_response": {}, "message": "Database Error in model int_revenue_aggregations (models/intermediate/int_revenue_aggregations.sql)\n  UNION types text and timestamp with time zone cannot be matched\n  LINE 119:     revenue_quarter AS period_quarter,\n                ^\n  compiled Code at target/run/gta_demo/models/intermediate/int_revenue_aggregations.sql", "failures": null, "unique_id": "model.gta_demo.int_revenue_aggregations", "compiled": true, "compiled_code": "\n\nWITH daily_revenue AS (\n    SELECT\n        payment_date,\n        tax_type,\n        payment_channel,\n        SUM(amount) AS daily_amount,\n        COUNT(DISTINCT taxpayer_id) AS unique_taxpayers,\n        COUNT(*) AS transaction_count\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\"\n    GROUP BY payment_date, tax_type, payment_channel\n),\n\nmonthly_revenue AS (\n    SELECT\n        DATE_TRUNC('month', payment_date) AS revenue_month,\n        tax_type,\n        SUM(amount) AS monthly_amount,\n        COUNT(DISTINCT taxpayer_id) AS unique_taxpayers,\n        COUNT(*) AS transaction_count,\n        AVG(amount) AS avg_payment_amount\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\"\n    GROUP BY DATE_TRUNC('month', payment_date), tax_type\n),\n\nregional_revenue AS (\n    SELECT\n        t.region,\n        t.district,\n        p.tax_type,\n        DATE_TRUNC('month', p.payment_date) AS revenue_month,\n        SUM(p.amount) AS amount,\n        COUNT(DISTINCT p.taxpayer_id) AS unique_taxpayers\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\" p\n    JOIN \"gta_warehouse\".\"analytics_staging\".\"stg_taxpayers\" t ON p.taxpayer_id = t.taxpayer_id\n    GROUP BY t.region, t.district, p.tax_type, DATE_TRUNC('month', p.payment_date)\n),\n\nsector_revenue AS (\n    SELECT\n        t.business_sector,\n        t.business_subsector,\n        p.tax_type,\n        DATE_TRUNC('quarter', p.payment_date) AS revenue_quarter,\n        SUM(p.amount) AS amount,\n        COUNT(DISTINCT p.taxpayer_id) AS unique_taxpayers,\n        AVG(p.amount) AS avg_payment\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\" p\n    JOIN \"gta_warehouse\".\"analytics_staging\".\"stg_taxpayers\" t ON p.taxpayer_id = t.taxpayer_id\n    WHERE t.business_sector IS NOT NULL\n    GROUP BY t.business_sector, t.business_subsector, p.tax_type, DATE_TRUNC('quarter', p.payment_date)\n)\n\nSELECT\n    'daily' AS aggregation_level,\n    payment_date AS period_date,\n    NULL AS period_month,\n    NULL AS period_quarter,\n    tax_type,\n    payment_channel,\n    NULL AS region,\n    NULL AS district,\n    NULL AS business_sector,\n    daily_amount AS amount,\n    unique_taxpayers,\n    transaction_count,\n    NULL AS avg_payment_amount\nFROM daily_revenue\n\nUNION ALL\n\nSELECT\n    'monthly' AS aggregation_level,\n    revenue_month AS period_date,\n    revenue_month AS period_month,\n    NULL AS period_quarter,\n    tax_type,\n    NULL AS payment_channel,\n    NULL AS region,\n    NULL AS district,\n    NULL AS business_sector,\n    monthly_amount AS amount,\n    unique_taxpayers,\n    transaction_count,\n    avg_payment_amount\nFROM monthly_revenue\n\nUNION ALL\n\nSELECT\n    'regional' AS aggregation_level,\n    revenue_month AS period_date,\n    revenue_month AS period_month,\n    NULL AS period_quarter,\n    tax_type,\n    NULL AS payment_channel,\n    region,\n    district,\n    NULL AS business_sector,\n    amount,\n    unique_taxpayers,\n    NULL AS transaction_count,\n    NULL AS avg_payment_amount\nFROM regional_revenue\n\nUNION ALL\n\nSELECT\n    'sector' AS aggregation_level,\n    revenue_quarter AS period_date,\n    NULL AS period_month,\n    revenue_quarter AS period_quarter,\n    tax_type,\n    NULL AS payment_channel,\n    NULL AS region,\n    NULL AS district,\n    business_sector,\n    amount,\n    unique_taxpayers,\n    NULL AS transaction_count,\n    avg_payment AS avg_payment_amount\nFROM sector_revenue", "relation_name": "\"gta_warehouse\".\"analytics_intermediate\".\"int_revenue_aggregations\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-07-06T10:22:40.905967Z", "completed_at": "2025-07-06T10:22:40.918363Z"}, {"name": "execute", "started_at": "2025-07-06T10:22:40.930079Z", "completed_at": "2025-07-06T10:22:40.989079Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10222578048706055, "adapter_response": {}, "message": "Database Error in model revenue_dashboard_metrics (models/marts/revenue_dashboard_metrics.sql)\n  UNION types bigint and text cannot be matched\n  LINE 108: SELECT * FROM cumulative_revenue\n                   ^\n  compiled Code at target/run/gta_demo/models/marts/revenue_dashboard_metrics.sql", "failures": null, "unique_id": "model.gta_demo.revenue_dashboard_metrics", "compiled": true, "compiled_code": "\n\nWITH current_period_revenue AS (\n    SELECT\n        DATE_TRUNC('day', payment_date) AS metric_date,\n        'daily_revenue' AS metric_type,\n        tax_type,\n        NULL AS region,\n        NULL AS payment_channel,\n        SUM(amount) AS revenue_amount,\n        COUNT(DISTINCT taxpayer_id) AS unique_taxpayers,\n        COUNT(*) AS transaction_count\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\"\n    WHERE payment_date >= CURRENT_DATE - INTERVAL '2 years'\n    GROUP BY DATE_TRUNC('day', payment_date), tax_type\n),\n\nmonthly_revenue AS (\n    SELECT\n        DATE_TRUNC('month', payment_date) AS metric_date,\n        'monthly_revenue' AS metric_type,\n        tax_type,\n        NULL AS region,\n        NULL AS payment_channel,\n        SUM(amount) AS revenue_amount,\n        COUNT(DISTINCT taxpayer_id) AS unique_taxpayers,\n        COUNT(*) AS transaction_count\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\"\n    GROUP BY DATE_TRUNC('month', payment_date), tax_type\n),\n\nregional_revenue AS (\n    SELECT\n        DATE_TRUNC('month', p.payment_date) AS metric_date,\n        'regional_revenue' AS metric_type,\n        p.tax_type,\n        t.region,\n        NULL AS payment_channel,\n        SUM(p.amount) AS revenue_amount,\n        COUNT(DISTINCT p.taxpayer_id) AS unique_taxpayers,\n        COUNT(*) AS transaction_count\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\" p\n    JOIN \"gta_warehouse\".\"analytics_staging\".\"stg_taxpayers\" t ON p.taxpayer_id = t.taxpayer_id\n    GROUP BY DATE_TRUNC('month', p.payment_date), p.tax_type, t.region\n),\n\nchannel_revenue AS (\n    SELECT\n        DATE_TRUNC('month', payment_date) AS metric_date,\n        'channel_revenue' AS metric_type,\n        tax_type,\n        NULL AS region,\n        payment_channel,\n        SUM(amount) AS revenue_amount,\n        COUNT(DISTINCT taxpayer_id) AS unique_taxpayers,\n        COUNT(*) AS transaction_count\n    FROM \"gta_warehouse\".\"analytics_staging\".\"stg_payments\"\n    GROUP BY DATE_TRUNC('month', payment_date), tax_type, payment_channel\n),\n\nyearly_targets AS (\n    SELECT\n        DATE_TRUNC('year', metric_date) AS target_year,\n        tax_type,\n        SUM(revenue_amount) * 1.15 AS annual_target -- 15% growth target\n    FROM monthly_revenue\n    WHERE metric_date >= CURRENT_DATE - INTERVAL '1 year' \n      AND metric_date < CURRENT_DATE\n    GROUP BY DATE_TRUNC('year', metric_date), tax_type\n),\n\ncumulative_revenue AS (\n    SELECT\n        metric_date,\n        'ytd_revenue' AS metric_type,\n        tax_type,\n        NULL AS region,\n        NULL AS payment_channel,\n        SUM(revenue_amount) OVER (\n            PARTITION BY DATE_TRUNC('year', metric_date), tax_type \n            ORDER BY metric_date\n        ) AS revenue_amount,\n        NULL AS unique_taxpayers,\n        NULL AS transaction_count\n    FROM monthly_revenue\n)\n\n-- Combine all metrics\nSELECT * FROM current_period_revenue\nUNION ALL\nSELECT * FROM monthly_revenue\nUNION ALL\nSELECT * FROM regional_revenue\nUNION ALL\nSELECT * FROM channel_revenue\nUNION ALL\nSELECT * FROM cumulative_revenue\n\n-- Add YoY comparison\nUNION ALL\nSELECT\n    m1.metric_date,\n    'yoy_growth' AS metric_type,\n    m1.tax_type,\n    NULL AS region,\n    NULL AS payment_channel,\n    (m1.revenue_amount - COALESCE(m2.revenue_amount, 0)) / NULLIF(m2.revenue_amount, 0) * 100 AS revenue_amount,\n    NULL AS unique_taxpayers,\n    NULL AS transaction_count\nFROM monthly_revenue m1\nLEFT JOIN monthly_revenue m2 \n    ON m1.tax_type = m2.tax_type \n    AND m2.metric_date = m1.metric_date - INTERVAL '1 year'\n\n-- Add target vs actual\nUNION ALL\nSELECT\n    m.metric_date,\n    'target_vs_actual' AS metric_type,\n    m.tax_type,\n    NULL AS region,\n    NULL AS payment_channel,\n    (m.revenue_amount / (t.annual_target / 12)) * 100 AS revenue_amount, -- % of monthly target\n    NULL AS unique_taxpayers,\n    NULL AS transaction_count\nFROM monthly_revenue m\nJOIN yearly_targets t \n    ON m.tax_type = t.tax_type \n    AND DATE_TRUNC('year', m.metric_date) = DATE_TRUNC('year', CURRENT_DATE)", "relation_name": "\"gta_warehouse\".\"analytics_analytics\".\"revenue_dashboard_metrics\""}], "elapsed_time": 0.5452675819396973, "args": {"use_colors_file": true, "log_level": "info", "log_format": "default", "version_check": true, "send_anonymous_usage_stats": true, "static_parser": true, "log_path": "/usr/app/dbt/gta_demo/logs", "which": "run", "macro_debugging": false, "exclude": [], "cache_selected_only": false, "log_file_max_bytes": 10485760, "profiles_dir": "/usr/app/dbt", "quiet": false, "print": true, "strict_mode": false, "invocation_command": "dbt run --project-dir /usr/app/dbt/gta_demo --profiles-dir /usr/app/dbt", "introspect": true, "use_colors": true, "write_json": true, "project_dir": "/usr/app/dbt/gta_demo", "log_level_file": "debug", "partial_parse": true, "favor_state": false, "indirect_selection": "eager", "printer_width": 80, "show_resource_report": false, "log_format_file": "debug", "select": [], "defer": false, "enable_legacy_logger": false, "populate_cache": true, "warn_error_options": {"include": [], "exclude": []}, "vars": {}, "partial_parse_file_diff": true}}